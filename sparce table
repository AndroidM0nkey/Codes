
const int MAXN = 600001;
const int K = 25;
int logs[MAXN + 1];
pair<int,int> st[MAXN][K];


logs[1] = 0;
	for (int i = 2; i <= MAXN; i++) {
		logs[i] = logs[i / 2] + 1;
	}
	//strou sparce
	for (int i = 0; i < n; i++) {
		st[i][0].first = a[i];
		st[i][0].second = a[i];
	}
	for (int j = 1; j <= K; j++) {
		for (int i = 0; i + (1 << j) <= n; i++) {
			st[i][j].first = min(st[i][j - 1].first, st[i + (1 << (j - 1))][j - 1].first);
			st[i][j].second = max(st[i][j - 1].second, st[i + (1 << (j - 1))][j - 1].second);
		}
	}
	//sparce postroeni
  
  mini = min(st[left][now].first, st[right - (1 << now) + 1][now].first);
			maxi = max(st[left][now].second, st[right - (1 << now) + 1][now].second);
